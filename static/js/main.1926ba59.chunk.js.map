{"version":3,"sources":["chart/CasesChart.js","chart/CasesCumulativeChart.js","chart/CasesIncreaseChart.js","utils/population.js","chart/CountySelect.js","chart/ChartContainer.js","App.js","serviceWorker.js","index.js"],"names":["calcAverage","values","index","size","overShoot","Math","floor","length","sum","console","log","i","CasesChart","dates","movingAverage","normalize","total","normalizeValue","val","data","map","date","tickItem","moment","format","cases","average","ComposedChart","width","height","Bar","dataKey","fill","Line","type","stroke","strokeWidth","dot","CartesianGrid","XAxis","angle","textAnchor","YAxis","arr","res","CasesCumulativeChart","casesCumulative","increase","CasesIncreaseChart","casesIncrease","population_map","CountySelect","chartTypes","id","name","Component","counties","slice","useState","findIndex","c","county","setCounty","chartType","setChartType","avg","setAvg","days","setDays","dataCleaned","len","county_name","getTotal","Grid","Row","columns","Column","Select","label","value","options","t","key","text","onChange","e","find","parseInt","Input","target","ResponsiveContainer","d","ChartContainer","setData","loading","setLoading","error","setError","wrap","content","file","readXlsxFile","sheet","then","rows","read","files","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1926ba59.chunk.js","sourcesContent":["import React from 'react';\nimport {Bar, CartesianGrid, ComposedChart, Line, XAxis, YAxis} from \"recharts\";\nimport moment from \"moment\";\n\nfunction calcAverage(values, index, size) {\n  const overShoot = Math.floor(size / 2);\n  if(index - overShoot < 0) {\n    return undefined;\n  }\n  if(index + overShoot + 1 > values.length) {\n    return undefined;\n  }\n  let sum = 0;\n  console.log(\"---\");\n  for(let i=0; i<size; i++) {\n    sum += values[i+index-overShoot];\n  }\n  return sum / size;\n\n}\n\n\nconst formatXAxis = (tickItem) => moment(tickItem).format('MMDD');\n\nexport function CasesChart({dates, values, movingAverage, normalize, total}) {\n\n  function normalizeValue(val) {\n    if(normalize) {\n      return 14*100_000*val/total\n    } else {\n      return val;\n    }\n  }\n\n  const data = dates.map((date, index) => ({date: formatXAxis(date), cases: normalizeValue(values[index]), average: normalizeValue(calcAverage(values, index, movingAverage))}));\n  return (\n      <ComposedChart width={1200} height={600}  data={data}>\n        <Bar dataKey=\"cases\" fill=\"#8884d8\" />\n        <Line type=\"monotone\" dataKey=\"average\" stroke=\"#000000\" strokeWidth={2} dot={false} />\n\n        <CartesianGrid stroke=\"#ccc\" />\n        <XAxis dataKey=\"date\" angle={-90} textAnchor=\"end\" />\n        <YAxis dataKey=\"cases\"/>\n      </ComposedChart>\n  );\n}\n","import React from 'react';\nimport {Bar, CartesianGrid, ComposedChart, XAxis, YAxis} from \"recharts\";\nimport moment from \"moment\";\n\nconst formatXAxis = (tickItem) => moment(tickItem).format('MMDD');\n\nconst sum = (arr, index) => {\n  let res = 0;\n  for(let i=0; i<=index; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nexport function CasesCumulativeChart({dates, values}) {\n\n  // Pretty ugly complexity doing the same sum over and over again, but the data sets are small for now.\n  const data = dates.map((date, index) => ({date: formatXAxis(date), casesCumulative: sum(values, index)}));\n\n  console.log(\"Cumulative data\", data);\n  return (\n      <ComposedChart width={1200} height={600} data={data}>\n        <Bar dataKey=\"casesCumulative\" fill=\"#8884d8\" />\n\n        <CartesianGrid stroke=\"#ccc\" />\n        <XAxis dataKey=\"date\" angle={-90} textAnchor=\"end\" />\n        <YAxis dataKey=\"casesCumulative\"/>\n      </ComposedChart>\n  );\n}\n","import React from 'react';\nimport {Bar, CartesianGrid, ComposedChart, XAxis, YAxis} from \"recharts\";\nimport moment from \"moment\";\n\nconst formatXAxis = (tickItem) => moment(tickItem).format('MMDD');\n\nconst increase = (arr, index) => {\n  let sum = 0;\n  for(let i=0; i<index; i++) {\n    sum += arr[i];\n  }\n  if(index === 0 || sum === 0) {\n    return 0;\n  }\n  console.log(\"*** \", arr[index], sum, arr[index]/sum);\n  const res = 100*arr[index]/sum;\n  if(res > 15) {\n    return 15;\n  } else {\n    return res;\n  }\n};\n\nexport function CasesIncreaseChart({dates, values}) {\n\n  // Pretty ugly complexity doing the same sum over and over again, but the data sets are small for now.\n  const data = dates.map((date, index) => ({date: formatXAxis(date), casesIncrease: increase(values, index)}));\n\n  console.log(\"Cumulative data\", data);\n  return (\n      <ComposedChart width={1200} height={600} data={data}>\n        <Bar dataKey=\"casesIncrease\" fill=\"#8884d8\" />\n\n        <CartesianGrid stroke=\"#ccc\" />\n        <XAxis dataKey=\"date\" angle={-90} textAnchor=\"end\" />\n        <YAxis dataKey=\"casesIncrease\"/>\n      </ComposedChart>\n  );\n}\n","\n\nexport const population_map = {\n  'Totalt_antal_fall': 10_435_447, // Object.entries(population_map).forEach(e => tot += e[1])\n  'Blekinge': 159_021,\n  'Dalarna': 288_118,\n  'Gotland': 61_031,\n  'Gävleborg': 287_858,\n  'Halland': 339_728,\n  'Jämtland_Härjedalen': 131_869,\n  'Jönköping': 366_700,\n  'Kalmar': 246_965,\n  'Kronoberg': 202_987,\n  'Norrbotten': 249_683,\n  'Skåne': 1_399_684,\n  'Stockholm': 2_408_360,\n  'Sörmland': 301_222,\n  'Uppsala': 393_165,\n  'Värmland': 283_115,\n  'Västerbotten': 274_301,\n  'Västernorrland': 244_408,\n  'Västmanland': 278_608,\n  'Västra_Götaland': 1_742_917,\n  'Örebro': 306_600,\n  'Östergötland': 469_107,\n};\n\n\n/*\n2021M09\n01 Stockholms län\t2 408 360\n03 Uppsala län\t393 165\n04 Södermanlands län\t301 222\n05 Östergötlands län\t469 107\n06 Jönköpings län\t366 700\n07 Kronobergs län\t202 987\n08 Kalmar län\t246 965\n09 Gotlands län\t61 031\n10 Blekinge län\t159 021\n12 Skåne län\t1 399 684\n13 Hallands län\t339 728\n14 Västra Götalands län\t1 742 917\n17 Värmlands län\t283 115\n18 Örebro län\t306 600\n19 Västmanlands län\t278 608\n20 Dalarnas län\t288 118\n21 Gävleborgs län\t287 858\n22 Västernorrlands län\t244 408\n23 Jämtlands län\t131 869\n24 Västerbottens län\t274 301\n25 Norrbottens län\t249 683\n */\n\n","import React, {useState} from 'react';\nimport {CasesChart} from \"./CasesChart\";\nimport {CasesCumulativeChart} from \"./CasesCumulativeChart\";\nimport {CasesIncreaseChart} from \"./CasesIncreaseChart\";\nimport {Grid, Input, Select} from \"semantic-ui-react\";\nimport {ResponsiveContainer} from \"recharts\";\nimport {population_map} from \"../utils/population\";\n\nexport function CountySelect({data}) {\n\n  const chartTypes = [\n    {\n      id: \"cases_normalized\", name: \"Cases per day normalized\", Component: CasesChart, normalize: true,\n    },\n    {\n      id: \"cases\", name: \"Cases per day\", Component: CasesChart, normalize: false,\n    },\n    {\n      id: \"casesCumulative\", name: \"Cases cumulative\", Component: CasesCumulativeChart, normalize: false,\n    },\n    {\n      id: \"casesIncrease\", name: \"Cases increase per day\", Component: CasesIncreaseChart, normalize: false,\n    },\n  ];\n\n\n  console.log(\"Data is now: \", data);\n  const counties = data[0].slice(1);\n\n  const [county, setCounty] = useState(counties.findIndex(c => c === \"Stockholm\"));\n  const [chartType, setChartType] = useState(chartTypes[0]);\n  const [avg, setAvg] = useState(7);\n  const [days, setDays] = useState(180);\n\n  const dataCleaned = data.slice(1);\n  const len = dataCleaned.length;\n  const getDates = () => dataCleaned.map(d => d[0]).slice(days ? len-days : 0); \n  const getValues = () => dataCleaned.map(d => d[1 + county]).slice(days ? len-days : 0);\n  const county_name = counties[county];\n  const getTotal = () => {\n    console.log(\"map = \", population_map);\n    console.log(\"county_name = \", county_name);\n    return population_map[county_name];\n  }\n\n  console.log(\"Total = \", getTotal());\n\n  return (\n    <Grid>\n      <Grid.Row columns={6}>\n        <Grid.Column>\n          <Select label=\"Type\" value={chartType.id}  options={chartTypes.map((t, i) => ({key: t.id, value: t.id, text: t.name}))} onChange={(e, data) => setChartType(chartTypes.find(c => c.id === data.value))}/>\n        </Grid.Column>\n        <Grid.Column>\n          <Select value={county}  options={counties.map((c, i) => ({key: i, value: i, text: c}))} onChange={(e, data) => setCounty(parseInt(data.value))}/>\n        </Grid.Column>\n        <Grid.Column>\n          <Input label=\"Days\" type=\"number\" value={days} onChange={e => setDays(e.target.value)}/>\n        </Grid.Column>\n        <Grid.Column>\n          <Input label=\"Moving Avg\" type=\"number\" value={avg} onChange={e => setAvg(e.target.value)}/>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row columns={1}>\n        <Grid.Column>\n          <ResponsiveContainer>\n            <chartType.Component dates={getDates()} values={getValues()} total={getTotal()} movingAverage={avg} normalize={chartType.normalize}/>\n          </ResponsiveContainer>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n}\n","import React, {useState} from 'react';\nimport readXlsxFile from \"read-excel-file\";\nimport {CountySelect} from \"./CountySelect\";\nimport {Grid, Input} from \"semantic-ui-react\";\n\n\nexport function ChartContainer() {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const read = (file) => {\n    setLoading(true);\n    try {\n      console.log(\"Gogo read XlsX\");\n      readXlsxFile(file, {sheet: 1}).then((rows) => {\n        console.log(\"Rows = \", rows);\n        setData(rows);\n      });\n      setLoading(false);\n    } catch(e) {\n      setLoading(false);\n      setError(e);\n      console.log(\"Something went wrong when reading file: \", e);\n\n    }\n  };\n\n  const wrap = (content) => (\n    <Grid>\n      <Grid.Row columns={1}>\n        <Grid.Column>\n          <Input type=\"file\" onChange={(e) => read(e.target.files[0])}/>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row columns={1}>\n        <Grid.Column>\n          {content}\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n\n  if(error) {\n    return wrap(\n      <div>There was a problem reading the file.</div>\n    );\n  } else if (loading) {\n    return wrap(\n      <div>Loading...</div>\n    );\n  } else if(data) {\n    return wrap(\n      <CountySelect data={data}/>\n    );\n  } else {\n    return wrap(\n      <div>Select a file above</div>\n    );\n  }\n\n\n}\n","import React from 'react';\nimport {ChartContainer} from \"./chart/ChartContainer\";\n\nfunction App() {\n  return (\n    <ChartContainer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}