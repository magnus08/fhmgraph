{"version":3,"sources":["chart/CasesChart.js","chart/CasesCumulativeChart.js","chart/CasesIncreaseChart.js","chart/CountySelect.js","chart/ChartContainer.js","App.js","serviceWorker.js","index.js"],"names":["calcAverage","values","index","size","overShoot","Math","floor","length","sum","console","log","i","CasesChart","dates","movingAverage","data","map","date","tickItem","moment","format","cases","average","width","height","dataKey","fill","type","stroke","strokeWidth","dot","angle","textAnchor","arr","res","CasesCumulativeChart","casesCumulative","increase","CasesIncreaseChart","casesIncrease","CountySelect","chartTypes","id","name","Component","counties","slice","useState","findIndex","c","county","setCounty","chartType","setChartType","avg","setAvg","dataCleaned","value","onChange","e","target","find","t","key","parseInt","d","ChartContainer","setData","loading","setLoading","error","setError","wrap","content","className","file","readXlsxFile","sheet","then","rows","read","files","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8f717b15.chunk.js","sourcesContent":["import React from 'react';\nimport {Bar, CartesianGrid, ComposedChart, Line, XAxis, YAxis} from \"recharts\";\nimport moment from \"moment\";\n\nfunction calcAverage(values, index, size) {\n  const overShoot = Math.floor(size / 2);\n  if(index - overShoot < 0) {\n    return undefined;\n  }\n  if(index + overShoot + 1 > values.length) {\n    return undefined;\n  }\n  let sum = 0;\n  console.log(\"---\");\n  for(let i=0; i<size; i++) {\n    sum += values[i+index-overShoot];\n  }\n  return sum / size;\n\n}\n\nconst formatXAxis = (tickItem) => moment(tickItem).format('MMDD');\n\nexport function CasesChart({dates, values, movingAverage}) {\n  const data = dates.map((date, index) => ({date: formatXAxis(date), cases: values[index], average: calcAverage(values, index, movingAverage)}));\n  return (\n      <ComposedChart width={1200} height={600} data={data}>\n        <Bar dataKey=\"cases\" fill=\"#8884d8\" />\n        <Line type=\"monotone\" dataKey=\"average\" stroke=\"#000000\" strokeWidth={2} dot={false} />\n\n        <CartesianGrid stroke=\"#ccc\" />\n        <XAxis dataKey=\"date\" angle={-90} textAnchor=\"end\" />\n        <YAxis dataKey=\"cases\"/>\n      </ComposedChart>\n  );\n}\n","import React from 'react';\nimport {Bar, CartesianGrid, ComposedChart, XAxis, YAxis} from \"recharts\";\nimport moment from \"moment\";\n\nconst formatXAxis = (tickItem) => moment(tickItem).format('MMDD');\n\nconst sum = (arr, index) => {\n  let res = 0;\n  for(let i=0; i<=index; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nexport function CasesCumulativeChart({dates, values}) {\n\n  // Pretty ugly complexity doing the same sum over and over again, but the data sets are small for now.\n  const data = dates.map((date, index) => ({date: formatXAxis(date), casesCumulative: sum(values, index)}));\n\n  console.log(\"Cumulative data\", data);\n  return (\n      <ComposedChart width={1200} height={600} data={data}>\n        <Bar dataKey=\"casesCumulative\" fill=\"#8884d8\" />\n\n        <CartesianGrid stroke=\"#ccc\" />\n        <XAxis dataKey=\"date\" angle={-90} textAnchor=\"end\" />\n        <YAxis dataKey=\"casesCumulative\"/>\n      </ComposedChart>\n  );\n}\n","import React from 'react';\nimport {Bar, CartesianGrid, ComposedChart, XAxis, YAxis} from \"recharts\";\nimport moment from \"moment\";\n\nconst formatXAxis = (tickItem) => moment(tickItem).format('MMDD');\n\nconst increase = (arr, index) => {\n  let sum = 0;\n  for(let i=0; i<index; i++) {\n    sum += arr[i];\n  }\n  if(index === 0 || sum === 0) {\n    return 0;\n  }\n  console.log(\"*** \", arr[index], sum, arr[index]/sum);\n  const res = 100*arr[index]/sum;\n  if(res > 15) {\n    return 15;\n  } else {\n    return res;\n  }\n};\n\nexport function CasesIncreaseChart({dates, values}) {\n\n  // Pretty ugly complexity doing the same sum over and over again, but the data sets are small for now.\n  const data = dates.map((date, index) => ({date: formatXAxis(date), casesIncrease: increase(values, index)}));\n\n  console.log(\"Cumulative data\", data);\n  return (\n      <ComposedChart width={1200} height={600} data={data}>\n        <Bar dataKey=\"casesIncrease\" fill=\"#8884d8\" />\n\n        <CartesianGrid stroke=\"#ccc\" />\n        <XAxis dataKey=\"date\" angle={-90} textAnchor=\"end\" />\n        <YAxis dataKey=\"casesIncrease\"/>\n      </ComposedChart>\n  );\n}\n","import React, {useState} from 'react';\nimport {CasesChart} from \"./CasesChart\";\nimport {CasesCumulativeChart} from \"./CasesCumulativeChart\";\nimport {CasesIncreaseChart} from \"./CasesIncreaseChart\";\n\nexport function CountySelect({data}) {\n\n  const getDates = () => dataCleaned.map(d => d[0]);\n  const getValues = () => dataCleaned.map(d => d[1 + county]);\n\n  const chartTypes = [\n    {\n      id: \"cases\", name: \"Cases per day\", Component: CasesChart,\n    },\n    {\n      id: \"casesCumulative\", name: \"Cases cumulative\", Component: CasesCumulativeChart,\n    },\n    {\n      id: \"casesIncrease\", name: \"Cases increase per day\", Component: CasesIncreaseChart,\n    },\n  ];\n\n\n  console.log(\"Data is now: \", data);\n  const counties = data[0].slice(1);\n\n  const [county, setCounty] = useState(counties.findIndex(c => c === \"Stockholm\"));\n  const [chartType, setChartType] = useState(chartTypes[0]);\n  const [avg, setAvg] = useState(7);\n\n  const dataCleaned = data.slice(1);\n\n  return (\n    <div>\n      Chart: <select value={chartType.id} onChange={(e) => {console.log(\"What???\", e.target.value); setChartType(chartTypes.find(c => c.id === e.target.value))}}>\n        {chartTypes.map((t) =>\n          <option key={t.id} value={t.id}>{t.name}</option>\n        )}\n      </select>\n      County: <select value={county} onChange={(e) => setCounty(parseInt(e.target.value))}>\n        {counties.map((c,i) =>\n          <option key={i} value={i}>{c}</option>\n        )}\n      </select>\n      Moving average: <input type=\"number\" value={avg} onChange={e => setAvg(e.target.value)}/>\n      <chartType.Component dates={getDates()} values={getValues()} movingAverage={avg}/>\n    </div>\n  );\n}\n","import React, {useState} from 'react';\nimport readXlsxFile from \"read-excel-file\";\nimport {CountySelect} from \"./CountySelect\";\n\n\nexport function ChartContainer() {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const read = (file) => {\n    setLoading(true);\n    try {\n      readXlsxFile(file, {sheet: 1}).then((rows) => {\n        console.log(\"Rows = \", rows);\n        setData(rows);\n      });\n      setLoading(false);\n    } catch(e) {\n      setLoading(false);\n      setError(e);\n      console.log(\"Something went wrong when reading file: \", e);\n\n    }\n  };\n\n  const wrap = (content) => (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <input type=\"file\" onChange={(e) => read(e.target.files[0])}/>\n        </div>\n        <div>\n          {content}\n        </div>\n      </header>\n    </div>\n  );\n\n  if(error) {\n    return wrap(\n      <div>There was a problem reading the file.</div>\n    );\n  } else if (loading) {\n    return wrap(\n      <div>Loading...</div>\n    );\n  } else if(data) {\n    return wrap(\n      <CountySelect data={data}/>\n    );\n  } else {\n    return wrap(\n      <div>Select a file above</div>\n    );\n  }\n\n\n}\n","import React from 'react';\nimport './App.css';\nimport {ChartContainer} from \"./chart/ChartContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ChartContainer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}